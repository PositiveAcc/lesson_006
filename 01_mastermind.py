# -*- coding: utf-8 -*-

# Игра «Быки и коровы»
# https://goo.gl/Go2mb9
#
# Правила:
# Компьютер загадывает четырехзначное число, все цифры которого различны
# (первая цифра числа отлична от нуля). Игроку необходимо разгадать задуманное число.
# Игрок вводит четырехзначное число c неповторяющимися цифрами,
# компьютер сообщают о количестве «быков» и «коров» в названном числе
# «бык» — цифра есть в записи задуманного числа и стоит в той же позиции,
#       что и в задуманном числе
# «корова» — цифра есть в записи задуманного числа, но не стоит в той же позиции,
#       что и в задуманном числе
#
# Например, если задумано число 3275 и названо число 1234,
# получаем в названном числе одного «быка» и одну «корову».
# Очевидно, что число отгадано в том случае, если имеем 4 «быка».
#
# Формат ответа компьютера
# > быки - 1, коровы - 1


# Составить отдельный модуль mastermind_engine, реализующий функциональность игры.
# В этом модуле нужно реализовать функции:
#   загадать_число()
#   проверить_число(NN) - возвращает словарь {'bulls': N, 'cows': N}
# Загаданное число хранить в глобальной переменной.
# Обратите внимание, что строки - это список символов.
#
# В текущем модуле (lesson_006/01_mastermind.py) реализовать логику работы с пользователем:
#   модуль движка загадывает число
#   в цикле, пока число не отгадано
#       у пользователя запрашивается вариант числа
#       модуль движка проверяет число и выдает быков/коров
#       результат быков/коров выводится на консоль
#  когда игрок угадал таки число - показать количество ходов и вопрос "Хотите еще партию?"
#
# При написании кода учитывайте, что движок игры никак не должен взаимодействовать с пользователем.
# Все общение с пользователем делать в текущем модуле. Представьте, что движок игры могут использовать
# разные клиенты - веб, чатбот, приложение, етс - они знают как спрашивать и отвечать пользователю.
# Движок игры реализует только саму функциональность игры.
# Это пример применения SOLID принципа (см https://goo.gl/GFMoaI) в архитектуре программ.
# Точнее, в этом случае важен принцип единственной ответственности - https://goo.gl/rYb3hT
#from mastermind_engine import game_number, check_number, make_a_number, game_not_over, bulls_and_cows
import mastermind_engine
user_number = []
#bulls_and_cows = {'bulls': 0, 'cows': 0}
while True:
    number_of_moves = 0
    user_number.clear()
    mastermind_engine.bulls_and_cows['bulls'] = 0
    mastermind_engine.bulls_and_cows['cows'] = 0
    mastermind_engine.game_number = mastermind_engine.make_a_number()
    while mastermind_engine.game_not_over(number=user_number):
        if len(user_number) > 3:
            print('Количество быков = {}', mastermind_engine.bulls_and_cows.setdefault('bulls'))
            print('Количество коров = {}', mastermind_engine.bulls_and_cows.setdefault('cows'))
        number_of_moves += 1
#        print(mastermind_engine.game_number)
        game_number_str = input('Введите правильное четырехзначное число ')
        if len(game_number_str) > 3:
            user_number.clear()
            mastermind_engine.bulls_and_cows['bulls'] = 0
            mastermind_engine.bulls_and_cows['cows'] = 0
            for i in range(len(game_number_str)):
                user_number.insert(i, game_number_str[i])
    print('Вы угадали число за {} ходов \n Хотите еще партию?'.format(number_of_moves))
    if int(input(' y = 1 \n n = 0')) == 0:
        break


